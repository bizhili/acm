# 0 0
include(ID) 0 1
" 0 9
main.h(ID) 0 10
" 0 16
char 1 0
tempN(ID) 1 5
[ 1 10
2 1 11
56(ID) 1 12
] 1 14
= 1 15
{ 1 16
'\0'(ID) 1 17
} 1 21
; 1 22
int 2 0
PO(ID) 2 4
= 2 6
0(ID) 2 7
; 2 8
char 3 0
key(ID) 3 5
[ 3 8
2 3 9
4(ID) 3 10
] 3 11
[ 3 12
10(ID) 3 13
] 3 15
= 3 16
{ 3 17
" 3 18
if 3 19
" 3 21
, 3 22
" 3 23
else 3 24
" 3 28
, 3 29
" 3 30
for 3 31
" 3 34
, 3 35
" 3 36
break 3 37
" 3 42
, 3 43
" 3 44
case 3 45
" 3 49
, 3 50
" 3 51
continue 3 52
" 3 60
, 3 61
" 3 62
extern 3 63
" 3 69
, 3 70
" 3 71
goto 3 72
" 3 76
, 3 77
" 3 78
return 3 79
" 3 85
, 3 86
" 3 87
switch 3 88
" 3 94
, 3 95
" 3 96
sizeof 3 97
" 3 103
, 3 104
\(ID) 3 105
" 4 0
struct 4 1
" 4 7
, 4 8
" 4 9
static 4 10
" 4 16
, 4 17
" 4 18
typedef 4 19
" 4 26
, 4 27
" 4 28
enum 4 29
" 4 33
, 4 34
" 4 35
union 4 36
" 4 41
, 4 42
" 4 43
while 4 44
" 4 49
, 4 50
" 4 51
int 4 52
" 4 55
, 4 56
" 4 57
float 4 58
" 4 63
, 4 64
" 4 65
short 4 66
" 4 71
, 4 72
" 4 73
long 4 74
" 4 78
, 4 79
" 4 80
double 4 81
" 4 87
, 4 88
" 4 89
void 4 90
" 4 94
, 4 95
" 4 96
unsigned 4 97
" 4 105
} 4 106
; 4 107
unsigned 5 0
char 5 9
hash_table(ID) 5 14
[ 5 24
2 5 25
400(ID) 5 26
] 5 29
= 5 30
{ 5 31
'\0'(ID) 5 32
} 5 36
; 5 37
int 6 0
main(ID) 6 4
( 6 8
int 6 9
argc(ID) 6 13
, 6 17
char 6 19
* 6 24
argv(ID) 6 25
[ 6 29
] 6 30
) 6 31
{ 7 0
FILE(ID) 8 4
* 8 9
fptr(ID) 8 10
, 8 14
* 8 15
fout(ID) 8 16
; 8 20
char 9 4
* 9 9
buff(ID) 9 10
; 9 14
int 10 4
statu(ID) 10 8
= 10 13
0(ID) 10 14
, 10 15
row(ID) 10 16
= 10 19
0(ID) 10 20
, 10 21
column(ID) 10 22
= 10 28
0(ID) 10 29
, 10 30
row_now(ID) 10 31
= 10 38
0(ID) 10 39
, 10 40
column_now(ID) 10 41
= 10 51
0(ID) 10 52
; 10 53
long 11 4
fsize(ID) 11 9
; 11 14
init_hash(ID) 12 4
( 12 13
) 12 14
; 12 15
if 13 4
( 13 7
( 13 8
fptr(ID) 13 9
= 13 14
fopen(ID) 13 16
( 13 21
argv(ID) 13 22
[ 13 26
1(ID) 13 27
] 13 28
, 13 29
" 13 30
r(ID) 13 31
" 13 32
) 13 33
) 13 34
= 13 36
= 13 37
NULL(ID) 13 39
) 13 43
{ 14 4
printf(ID) 15 8
( 15 14
" 15 15
Error(ID) 15 16
! 15 21
opening(ID) 15 23
file(ID) 15 31
" 15 35
) 15 36
; 15 37
exit(ID) 16 8
( 16 12
0(ID) 16 13
) 16 14
; 16 15
} 17 4
fout(ID) 18 4
= 18 9
fopen(ID) 18 11
( 18 16
" 18 17
haha.txt(ID) 18 18
" 18 26
, 18 27
" 18 28
w(ID) 18 29
" 18 30
) 18 31
; 18 32
fseek(ID) 19 4
( 19 9
fptr(ID) 19 10
, 19 14
0(ID) 19 16
, 19 17
SEEK_END(ID) 19 19
) 19 27
; 19 28
fsize(ID) 20 4
= 20 10
ftell(ID) 20 12
( 20 17
fptr(ID) 20 18
) 20 22
; 20 23
fseek(ID) 21 4
( 21 9
fptr(ID) 21 10
, 21 14
0(ID) 21 16
, 21 17
SEEK_SET(ID) 21 19
) 21 27
; 21 28
/ 21 31
* 21 32
same(ID) 21 34
as(ID) 21 39
rewind(ID) 21 42
( 21 48
f(ID) 21 49
) 21 50
; 21 51
* 21 53
/ 21 54
buff(ID) 22 4
= 22 8
malloc(ID) 22 10
( 22 16
fsize(ID) 22 17
+ 22 23
1(ID) 22 25
) 22 26
; 22 27
fread(ID) 23 4
( 23 9
buff(ID) 23 10
, 23 14
1(ID) 23 16
, 23 17
fsize(ID) 23 19
, 23 24
fptr(ID) 23 26
) 23 30
; 23 31
for 24 4
( 24 7
int 24 8
point(ID) 24 12
= 24 17
0(ID) 24 18
; 24 19
point(ID) 24 20
< 24 25
fsize(ID) 24 26
+ 24 32
1(ID) 24 34
& 24 36
& 24 37
buff(ID) 24 39
[ 24 43
point(ID) 24 44
] 24 49
! 24 50
= 24 51
'\0'(ID) 24 52
; 24 56
) 24 57
{ 25 4
if 26 8
( 26 10
statu(ID) 26 11
= 26 16
= 26 17
0(ID) 26 18
) 26 19
{ 27 8
if 28 12
( 28 14
buff(ID) 28 15
[ 28 19
point(ID) 28 20
] 28 25
= 28 26
= 28 27
' 28 28
' 28 30
) 28 31
{ 29 12
+ 30 16
+ 30 17
point(ID) 30 18
; 30 23
+ 31 16
+ 31 17
column(ID) 31 18
; 31 24
} 32 12
else 33 12
if 33 17
( 33 19
buff(ID) 33 20
[ 33 24
point(ID) 33 25
] 33 30
= 33 31
= 33 32
'\n'(ID) 33 33
) 33 37
{ 34 12
+ 35 16
+ 35 17
point(ID) 35 18
; 35 23
+ 36 16
+ 36 17
row(ID) 36 18
; 36 21
column(ID) 37 16
= 37 22
0(ID) 37 23
; 37 24
} 38 12
else 39 12
{ 40 12
statu(ID) 41 16
= 41 21
1(ID) 41 22
; 41 23
row_now(ID) 42 16
= 42 23
row(ID) 42 24
, 42 27
column_now(ID) 42 28
= 42 38
column(ID) 42 39
; 42 45
} 43 12
} 44 8
else 45 8
if 45 13
( 45 15
statu(ID) 45 16
= 45 21
= 45 22
1(ID) 45 23
) 45 24
{ 46 8
if 47 12
( 47 14
buff(ID) 47 15
[ 47 19
point(ID) 47 20
] 47 25
= 47 26
= 47 27
' 47 28
' 47 30
) 47 31
{ 48 12
+ 49 16
+ 49 17
point(ID) 49 18
; 49 23
+ 50 16
+ 50 17
column(ID) 50 18
; 50 24
statu(ID) 51 16
= 51 21
0(ID) 51 22
; 51 23
if 52 16
( 52 18
! 52 19
check(ID) 52 20
( 52 25
) 52 26
) 52 27
fprintf(ID) 53 20
( 53 27
fout(ID) 53 28
, 53 32
" 53 33
% 53 34
s(ID) 53 35
( 53 36
ID(ID) 53 37
) 53 39
% 53 41
d(ID) 53 42
% 53 44
d\n(ID) 53 45
" 53 48
, 53 49
tempN(ID) 53 50
, 53 55
row_now(ID) 53 56
, 53 63
column_now(ID) 53 64
) 53 74
; 53 75
else 54 16
fprintf(ID) 55 20
( 55 27
fout(ID) 55 28
, 55 32
" 55 33
% 55 34
s(ID) 55 35
% 55 37
d(ID) 55 38
% 55 40
d\n(ID) 55 41
" 55 44
, 55 45
tempN(ID) 55 46
, 55 51
row_now(ID) 55 52
, 55 59
column_now(ID) 55 60
) 55 70
; 55 71
empty(ID) 56 16
( 56 21
) 56 22
; 56 23
} 57 12
else 58 12
if 58 17
( 58 19
buff(ID) 58 20
[ 58 24
point(ID) 58 25
] 58 30
= 58 31
= 58 32
'\n'(ID) 58 33
) 58 37
{ 59 12
+ 60 16
+ 60 17
point(ID) 60 18
; 60 23
+ 61 16
+ 61 17
row(ID) 61 18
; 61 21
column(ID) 62 16
= 62 22
0(ID) 62 23
; 62 24
statu(ID) 63 16
= 63 21
0(ID) 63 22
; 63 23
if 64 16
( 64 18
! 64 19
check(ID) 64 20
( 64 25
) 64 26
) 64 27
fprintf(ID) 65 20
( 65 27
fout(ID) 65 28
, 65 32
" 65 33
% 65 34
s(ID) 65 35
( 65 36
ID(ID) 65 37
) 65 39
% 65 41
d(ID) 65 42
% 65 44
d\n(ID) 65 45
" 65 48
, 65 49
tempN(ID) 65 50
, 65 55
row_now(ID) 65 56
, 65 63
column_now(ID) 65 64
) 65 74
; 65 75
else 66 16
fprintf(ID) 67 20
( 67 27
fout(ID) 67 28
, 67 32
" 67 33
% 67 34
s(ID) 67 35
% 67 37
d(ID) 67 38
% 67 40
d\n(ID) 67 41
" 67 44
, 67 45
tempN(ID) 67 46
, 67 51
row_now(ID) 67 52
, 67 59
column_now(ID) 67 60
) 67 70
; 67 71
empty(ID) 68 16
( 68 21
) 68 22
; 68 23
} 69 12
else 70 12
{ 71 12
push(ID) 72 16
( 72 20
buff(ID) 72 21
[ 72 25
point(ID) 72 26
] 72 31
) 72 32
; 72 33
+ 73 16
+ 73 17
column(ID) 73 18
; 73 24
+ 74 16
+ 74 17
point(ID) 74 18
; 74 23
} 75 12
} 76 8
} 77 4
fprintf(ID) 78 4
( 78 11
fout(ID) 78 12
, 78 16
" 78 17
bizhi(ID) 78 18
" 78 23
) 78 24
; 78 25
fclose(ID) 79 4
( 79 10
fptr(ID) 79 11
) 79 15
; 79 16
fclose(ID) 80 4
( 80 10
fout(ID) 80 11
) 80 15
; 80 16
return 81 4
0(ID) 81 11
; 81 12
} 82 0
void 83 0
push(ID) 83 5
( 83 9
char 83 10
a(ID) 83 15
) 83 16
{ 84 0
tempN(ID) 85 4
[ 85 9
PO(ID) 85 10
] 85 12
= 85 13
a(ID) 85 14
; 85 15
+ 86 4
+ 86 5
PO(ID) 86 6
; 86 8
} 87 0
void 88 0
empty(ID) 88 5
( 88 10
) 88 11
{ 89 0
memset(ID) 90 4
( 90 10
tempN(ID) 90 11
, 90 16
'\0'(ID) 90 17
, 90 21
2 90 22
56(ID) 90 23
) 90 25
; 90 26
PO(ID) 91 4
= 91 6
0(ID) 91 7
; 91 8
} 92 0
int 94 0
check(ID) 94 4
( 94 9
) 94 10
{ 95 0
if 96 4
( 96 6
hash_table(ID) 96 7
[ 96 17
calcu_hash(ID) 96 18
( 96 28
tempN(ID) 96 29
) 96 34
] 96 35
= 96 36
= 96 37
1(ID) 96 38
) 96 39
return 97 8
1(ID) 97 15
; 97 16
else 98 4
return 99 8
0(ID) 99 15
; 99 16
} 100 0
int 101 0
calcu_hash(ID) 101 4
( 101 14
char 101 15
* 101 20
str(ID) 101 21
) 101 24
{ 102 0
int 103 4
count(ID) 103 8
= 103 13
0(ID) 103 14
, 103 15
ans(ID) 103 16
; 103 19
while 104 4
( 104 9
str(ID) 104 10
[ 104 13
+ 104 14
+ 104 15
count(ID) 104 16
] 104 21
! 104 22
= 104 23
'\0'(ID) 104 24
) 104 28
; 104 29
ans(ID) 105 4
= 105 7
count(ID) 105 8
% 105 13
2 105 14
0(ID) 105 15
* 105 16
2 105 17
00(ID) 105 18
+ 105 20
( 105 21
str(ID) 105 22
[ 105 25
count(ID) 105 26
- 105 31
1(ID) 105 32
] 105 33
- 105 34
'a'(ID) 105 35
) 105 38
* 105 39
2 105 40
+ 105 41
( 105 42
str(ID) 105 43
[ 105 46
0(ID) 105 47
] 105 48
- 105 49
'a'(ID) 105 50
) 105 53
* 105 54
3(ID) 105 55
+ 105 56
( 105 57
str(ID) 105 58
[ 105 61
( 105 62
int 105 63
) 105 66
count(ID) 105 67
/ 105 72
2 105 73
] 105 74
- 105 75
'a'(ID) 105 76
) 105 79
; 105 80
return 106 4
ans(ID) 106 11
; 106 14
} 107 0
void 108 0
init_hash(ID) 108 5
( 108 14
) 108 15
{ 109 0
for 110 4
( 110 7
int 110 8
i(ID) 110 12
= 110 13
0(ID) 110 14
; 110 15
i(ID) 110 16
< 110 17
2 110 18
4(ID) 110 19
; 110 20
i(ID) 110 21
+ 110 22
+ 110 23
) 110 24
{ 111 4
hash_table(ID) 112 8
[ 112 18
calcu_hash(ID) 112 19
( 112 29
key(ID) 112 30
[ 112 33
i(ID) 112 34
] 112 35
) 112 36
] 112 37
= 112 38
1(ID) 112 39
; 112 40
} 113 4
} 114 0
bizhi